package CapaInterfaz;

import CapaNegocio.NodoArbol;
import CapaNegocio.Tree;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;


public class GUITree extends javax.swing.JFrame {

    private Tree arbol;

    /**
     * Creates new form GUITree
     */
    public GUITree() {
        initComponents();
        arbol = new Tree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Scroll = new javax.swing.JScrollPane();
        TreeView = new javax.swing.JTree();
        BtnInsertar = new javax.swing.JButton();
        BtnEliminar = new javax.swing.JButton();
        BtnModificar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TtaInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Scroll.setViewportView(TreeView);

        BtnInsertar.setText("Insertar");
        BtnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInsertarActionPerformed(evt);
            }
        });

        BtnEliminar.setText("Eliminar");
        BtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarActionPerformed(evt);
            }
        });

        BtnModificar.setText("Modificar");
        BtnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnModificarActionPerformed(evt);
            }
        });

        TtaInfo.setColumns(20);
        TtaInfo.setRows(5);
        jScrollPane1.setViewportView(TtaInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Scroll)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnInsertar)
                            .addComponent(BtnEliminar)
                            .addComponent(BtnModificar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInsertarActionPerformed
        // Obtener el nodo seleccionado en el JTree
        DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) TreeView.getLastSelectedPathComponent();
        if (nodoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un nodo para agregar un nuevo hijo.");
            return;
        }

        // Pedir al usuario que ingrese el tipo de nodo
        String tipoNodo = JOptionPane.showInputDialog(this, "Ingrese el tipo del nuevo nodo:");
        if (tipoNodo != null && !tipoNodo.trim().isEmpty()) {
            // Crear nuevo nodo en la clase Tree
            short nuevoNodoId = (short) (arbol.getNodos().size() + 1); // Generar ID
            NodoArbol nuevoNodo = new NodoArbol(nuevoNodoId, tipoNodo);
            arbol.agregarNodo(nuevoNodo);

            // Agregar el nodo como hijo del nodo seleccionado
            NodoArbol nodoPadre = arbol.buscarNodo((short) nodoSeleccionado.getUserObject());
            arbol.agregarEnlace(nodoPadre.getNodoArbolId(), nuevoNodoId, 'T', (short) nodoPadre.getHijos().size());

            // Actualizar visualización en el JTree
            DefaultMutableTreeNode nuevoNodoVisual = new DefaultMutableTreeNode(tipoNodo);
            nodoSeleccionado.add(nuevoNodoVisual);
            ((DefaultTreeModel) TreeView.getModel()).reload(nodoSeleccionado);
        }
    }//GEN-LAST:event_BtnInsertarActionPerformed

    private void BtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarActionPerformed
        // Obtener el nodo seleccionado en el JTree
        DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) TreeView.getLastSelectedPathComponent();
        if (nodoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un nodo para eliminar.");
            return;
        }

        // Confirmar la eliminación
        int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este nodo y todos sus hijos?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Eliminar nodo en la clase Tree
            NodoArbol nodoAEliminar = arbol.buscarNodo((short) nodoSeleccionado.getUserObject());
            if (nodoAEliminar != null) {
                arbol.eliminarNodo(nodoAEliminar);

                // Eliminar visualización en el JTree
                DefaultMutableTreeNode nodoPadre = (DefaultMutableTreeNode) nodoSeleccionado.getParent();
                if (nodoPadre != null) {
                    nodoPadre.remove(nodoSeleccionado);
                    ((DefaultTreeModel) TreeView.getModel()).reload(nodoPadre);
                } else {
                    ((DefaultTreeModel) TreeView.getModel()).setRoot(null);
                }
            }
        }
    }//GEN-LAST:event_BtnEliminarActionPerformed

    private void BtnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnModificarActionPerformed
        // Obtener el nodo seleccionado en el JTree
        DefaultMutableTreeNode nodoSeleccionado = (DefaultMutableTreeNode) TreeView.getLastSelectedPathComponent();
        if (nodoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un nodo para modificar.");
            return;
        }

        // Pedir al usuario que ingrese el nuevo tipo de nodo
        String nuevoTipo = JOptionPane.showInputDialog(this, "Ingrese el nuevo tipo del nodo:", nodoSeleccionado.getUserObject().toString());
        if (nuevoTipo != null && !nuevoTipo.trim().isEmpty()) {
            // Modificar el nodo en la clase Tree
            NodoArbol nodoAModificar = arbol.buscarNodo((short) nodoSeleccionado.getUserObject());
            if (nodoAModificar != null) {
                nodoAModificar.setTipoNodo(nuevoTipo);

                // Modificar visualización en el JTree
                nodoSeleccionado.setUserObject(nuevoTipo);
                ((DefaultTreeModel) TreeView.getModel()).reload(nodoSeleccionado);
            }
        }
    }//GEN-LAST:event_BtnModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUITree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUITree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUITree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUITree.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUITree().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnEliminar;
    private javax.swing.JButton BtnInsertar;
    private javax.swing.JButton BtnModificar;
    private javax.swing.JScrollPane Scroll;
    private javax.swing.JTree TreeView;
    private javax.swing.JTextArea TtaInfo;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
